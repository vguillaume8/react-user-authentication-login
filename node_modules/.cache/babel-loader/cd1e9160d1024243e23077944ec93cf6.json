{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kingvince/Projects/react-user-authentication-login/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(registerSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loginSaga);\n\nimport { put, call } from 'redux-saga/effects';\nimport { registerUserService, loginUserService } from '../services/authenticationService';\nimport * as types from '../actions';\nexport function registerSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function registerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(registerUserService, payload);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return [put({\n            type: types.REGISTER_USER_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: types.REGISTER_USER_ERROR,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n}\nexport function loginSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginUserService, payload);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return [put({\n            type: types.LOGIN_USER_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: types.LOGIN_USER_ERROR,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[0, 8]]);\n}","map":{"version":3,"sources":["/Users/kingvince/Projects/react-user-authentication-login/src/sagas/authenticationSaga.js"],"names":["registerSaga","loginSaga","put","call","registerUserService","loginUserService","types","payload","response","type","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","error","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR"],"mappings":";;;;yBAKiBA,Y;;;yBAWAC,S;;AAhBjB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,mCAAtD;AAEA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AAEA,OAAO,SAAUN,YAAV,CAAuBO,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAMJ,IAAI,CAACC,mBAAD,EAAsBG,OAAtB,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CACJN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAEH,KAAK,CAACI,qBAAd;AAAqCF,YAAAA,QAAQ,EAARA;AAArC,WAAD,CADC,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOH,iBAAMN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAEH,KAAK,CAACK,mBAAd;AAAmCC,YAAAA,KAAK;AAAxC,WAAD,CAAT;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAUX,SAAV,CAAoBM,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAMJ,IAAI,CAACE,gBAAD,EAAmBE,OAAnB,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CACJN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAEH,KAAK,CAACO,kBAAd;AAAkCL,YAAAA,QAAQ,EAARA;AAAlC,WAAD,CADC,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOH,iBAAMN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAEH,KAAK,CAACQ,gBAAd;AAAgCF,YAAAA,KAAK;AAArC,WAAD,CAAT;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, call } from 'redux-saga/effects';\nimport { registerUserService, loginUserService } from '../services/authenticationService';\n\nimport * as types from '../actions'\n\nexport function* registerSaga(payload) {\n  try {\n    const response = yield call(registerUserService, payload);\n    yield [\n      put({ type: types.REGISTER_USER_SUCCESS, response })\n    ];\n  } catch(error) {\n    yield put({ type: types.REGISTER_USER_ERROR, error });\n  }\n}\n\nexport function* loginSaga(payload) {\n  try {\n    const response = yield call(loginUserService, payload);\n    yield [\n      put({ type: types.LOGIN_USER_SUCCESS, response })\n    ];\n  } catch(error) {\n    yield put({ type: types.LOGIN_USER_ERROR, error })\n  }\n}"]},"metadata":{},"sourceType":"module"}